syntax = "proto3";

package milsimtools.users.v1;

import "milsimtools/users/v1/users.proto";

import "buf/validate/validate.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

message GetUserRequest {
  oneof value {
    option (buf.validate.oneof).required = true;

    // The ID of the user to retrieve.
    string id = 1;

    // The username of the user to retrieve.
    string username = 2;

    // The email of the user to retrieve.
    string email = 3;
  }
}

message ListUsersRequest {
  // The maximum number of users to return. Default is 50, maximum is 100.
  int32 page_size = 1 [(buf.validate.field).int32.lte = 100];

  // A page token, received from a previous `ListUsers` call.
  string page_token = 2;
}

message ListUsersResponse {
  // The users.
  repeated UserView users = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  string next_page_token = 2;
}

message CreateUserRequest {
  // The user to create.
  User user = 1;
}

message UpdateUserRequest {
  // The user to update.
  //
  // The user's `id` field is used to identify the user to update.
  User user = 1;

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteUserRequest {
  // The ID of the user to delete.
  //
  // The user's `id` field is used to identify the user to update.
  string user_id = 1;
}

service UsersService {
  // Gets a user by an ID.
  rpc GetUser (GetUserRequest) returns (UserView) {
    option (google.api.http) = { get: "/v1/users/{id}" };
  };

  // Lists users.
  rpc ListUsers (ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = { get: "/v1/users" };
  };

  // Create a new user.
  rpc CreateUser (CreateUserRequest) returns (User) {
    option (google.api.http) = { post: "/v1/users" };
  };

  // Update an existing user by its ID.
  rpc UpdateUser (UpdateUserRequest) returns (User) {
    option (google.api.http) = { patch: "/v1/users/{user.id}" };
  };

  // Update an existing user by its ID.
  rpc DeleteUser (DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { delete: "/v1/users/{user_id}" };
  };
}
