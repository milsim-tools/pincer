// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: milsimtools/units/v1/service.proto

package unitsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UnitsService_GetUnit_FullMethodName    = "/milsimtools.units.v1.UnitsService/GetUnit"
	UnitsService_ListUnits_FullMethodName  = "/milsimtools.units.v1.UnitsService/ListUnits"
	UnitsService_CreateUnit_FullMethodName = "/milsimtools.units.v1.UnitsService/CreateUnit"
)

// UnitsServiceClient is the client API for UnitsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnitsServiceClient interface {
	GetUnit(ctx context.Context, in *GetUnitRequest, opts ...grpc.CallOption) (*UnitView, error)
	ListUnits(ctx context.Context, in *ListUnitsRequest, opts ...grpc.CallOption) (*ListUnitsResponse, error)
	CreateUnit(ctx context.Context, in *CreateUnitRequest, opts ...grpc.CallOption) (*Unit, error)
}

type unitsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUnitsServiceClient(cc grpc.ClientConnInterface) UnitsServiceClient {
	return &unitsServiceClient{cc}
}

func (c *unitsServiceClient) GetUnit(ctx context.Context, in *GetUnitRequest, opts ...grpc.CallOption) (*UnitView, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitView)
	err := c.cc.Invoke(ctx, UnitsService_GetUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsServiceClient) ListUnits(ctx context.Context, in *ListUnitsRequest, opts ...grpc.CallOption) (*ListUnitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUnitsResponse)
	err := c.cc.Invoke(ctx, UnitsService_ListUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsServiceClient) CreateUnit(ctx context.Context, in *CreateUnitRequest, opts ...grpc.CallOption) (*Unit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Unit)
	err := c.cc.Invoke(ctx, UnitsService_CreateUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnitsServiceServer is the server API for UnitsService service.
// All implementations must embed UnimplementedUnitsServiceServer
// for forward compatibility.
type UnitsServiceServer interface {
	GetUnit(context.Context, *GetUnitRequest) (*UnitView, error)
	ListUnits(context.Context, *ListUnitsRequest) (*ListUnitsResponse, error)
	CreateUnit(context.Context, *CreateUnitRequest) (*Unit, error)
	mustEmbedUnimplementedUnitsServiceServer()
}

// UnimplementedUnitsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUnitsServiceServer struct{}

func (UnimplementedUnitsServiceServer) GetUnit(context.Context, *GetUnitRequest) (*UnitView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnit not implemented")
}
func (UnimplementedUnitsServiceServer) ListUnits(context.Context, *ListUnitsRequest) (*ListUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnits not implemented")
}
func (UnimplementedUnitsServiceServer) CreateUnit(context.Context, *CreateUnitRequest) (*Unit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnit not implemented")
}
func (UnimplementedUnitsServiceServer) mustEmbedUnimplementedUnitsServiceServer() {}
func (UnimplementedUnitsServiceServer) testEmbeddedByValue()                      {}

// UnsafeUnitsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnitsServiceServer will
// result in compilation errors.
type UnsafeUnitsServiceServer interface {
	mustEmbedUnimplementedUnitsServiceServer()
}

func RegisterUnitsServiceServer(s grpc.ServiceRegistrar, srv UnitsServiceServer) {
	// If the following call pancis, it indicates UnimplementedUnitsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UnitsService_ServiceDesc, srv)
}

func _UnitsService_GetUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitsServiceServer).GetUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnitsService_GetUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitsServiceServer).GetUnit(ctx, req.(*GetUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitsService_ListUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitsServiceServer).ListUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnitsService_ListUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitsServiceServer).ListUnits(ctx, req.(*ListUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitsService_CreateUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitsServiceServer).CreateUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnitsService_CreateUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitsServiceServer).CreateUnit(ctx, req.(*CreateUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UnitsService_ServiceDesc is the grpc.ServiceDesc for UnitsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnitsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milsimtools.units.v1.UnitsService",
	HandlerType: (*UnitsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUnit",
			Handler:    _UnitsService_GetUnit_Handler,
		},
		{
			MethodName: "ListUnits",
			Handler:    _UnitsService_ListUnits_Handler,
		},
		{
			MethodName: "CreateUnit",
			Handler:    _UnitsService_CreateUnit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milsimtools/units/v1/service.proto",
}
